// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: csm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShardManagerClient is the client API for ShardManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardManagerClient interface {
	RegisterCacheServer(ctx context.Context, in *RegisterCacheServerRequest, opts ...grpc.CallOption) (*RegisterCacheServerResponse, error)
}

type shardManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewShardManagerClient(cc grpc.ClientConnInterface) ShardManagerClient {
	return &shardManagerClient{cc}
}

func (c *shardManagerClient) RegisterCacheServer(ctx context.Context, in *RegisterCacheServerRequest, opts ...grpc.CallOption) (*RegisterCacheServerResponse, error) {
	out := new(RegisterCacheServerResponse)
	err := c.cc.Invoke(ctx, "/ganache.csm.ShardManager/RegisterCacheServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardManagerServer is the server API for ShardManager service.
// All implementations must embed UnimplementedShardManagerServer
// for forward compatibility
type ShardManagerServer interface {
	RegisterCacheServer(context.Context, *RegisterCacheServerRequest) (*RegisterCacheServerResponse, error)
	mustEmbedUnimplementedShardManagerServer()
}

// UnimplementedShardManagerServer must be embedded to have forward compatible implementations.
type UnimplementedShardManagerServer struct {
}

func (UnimplementedShardManagerServer) RegisterCacheServer(context.Context, *RegisterCacheServerRequest) (*RegisterCacheServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCacheServer not implemented")
}
func (UnimplementedShardManagerServer) mustEmbedUnimplementedShardManagerServer() {}

// UnsafeShardManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardManagerServer will
// result in compilation errors.
type UnsafeShardManagerServer interface {
	mustEmbedUnimplementedShardManagerServer()
}

func RegisterShardManagerServer(s grpc.ServiceRegistrar, srv ShardManagerServer) {
	s.RegisterService(&ShardManager_ServiceDesc, srv)
}

func _ShardManager_RegisterCacheServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCacheServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardManagerServer).RegisterCacheServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganache.csm.ShardManager/RegisterCacheServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardManagerServer).RegisterCacheServer(ctx, req.(*RegisterCacheServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardManager_ServiceDesc is the grpc.ServiceDesc for ShardManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ganache.csm.ShardManager",
	HandlerType: (*ShardManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCacheServer",
			Handler:    _ShardManager_RegisterCacheServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csm.proto",
}
