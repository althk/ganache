// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: replmgr.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplClient is the client API for Repl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplClient interface {
	SyncCache(ctx context.Context, opts ...grpc.CallOption) (Repl_SyncCacheClient, error)
}

type replClient struct {
	cc grpc.ClientConnInterface
}

func NewReplClient(cc grpc.ClientConnInterface) ReplClient {
	return &replClient{cc}
}

func (c *replClient) SyncCache(ctx context.Context, opts ...grpc.CallOption) (Repl_SyncCacheClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repl_ServiceDesc.Streams[0], "/ganache.replmgr.Repl/SyncCache", opts...)
	if err != nil {
		return nil, err
	}
	x := &replSyncCacheClient{stream}
	return x, nil
}

type Repl_SyncCacheClient interface {
	Send(*CacheData) error
	Recv() (*CacheData, error)
	grpc.ClientStream
}

type replSyncCacheClient struct {
	grpc.ClientStream
}

func (x *replSyncCacheClient) Send(m *CacheData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replSyncCacheClient) Recv() (*CacheData, error) {
	m := new(CacheData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplServer is the server API for Repl service.
// All implementations must embed UnimplementedReplServer
// for forward compatibility
type ReplServer interface {
	SyncCache(Repl_SyncCacheServer) error
	mustEmbedUnimplementedReplServer()
}

// UnimplementedReplServer must be embedded to have forward compatible implementations.
type UnimplementedReplServer struct {
}

func (UnimplementedReplServer) SyncCache(Repl_SyncCacheServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncCache not implemented")
}
func (UnimplementedReplServer) mustEmbedUnimplementedReplServer() {}

// UnsafeReplServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplServer will
// result in compilation errors.
type UnsafeReplServer interface {
	mustEmbedUnimplementedReplServer()
}

func RegisterReplServer(s grpc.ServiceRegistrar, srv ReplServer) {
	s.RegisterService(&Repl_ServiceDesc, srv)
}

func _Repl_SyncCache_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplServer).SyncCache(&replSyncCacheServer{stream})
}

type Repl_SyncCacheServer interface {
	Send(*CacheData) error
	Recv() (*CacheData, error)
	grpc.ServerStream
}

type replSyncCacheServer struct {
	grpc.ServerStream
}

func (x *replSyncCacheServer) Send(m *CacheData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replSyncCacheServer) Recv() (*CacheData, error) {
	m := new(CacheData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Repl_ServiceDesc is the grpc.ServiceDesc for Repl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Repl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ganache.replmgr.Repl",
	HandlerType: (*ReplServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncCache",
			Handler:       _Repl_SyncCache_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "replmgr.proto",
}
